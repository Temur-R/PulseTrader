{"ast":null,"code":"export class PulseTraderWebSocket {\n  constructor(token, onMessage) {\n    this.ws = void 0;\n    this.token = void 0;\n    this.onMessage = void 0;\n    this.reconnectAttempts = void 0;\n    this.maxReconnectAttempts = void 0;\n    this.ws = null;\n    this.token = token;\n    this.onMessage = onMessage;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n  }\n  connect() {\n    try {\n      this.ws = new WebSocket('ws://localhost:8080');\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        // Authenticate\n        if (this.ws) {\n          this.ws.send(JSON.stringify({\n            type: 'auth',\n            token: this.token\n          }));\n        }\n      };\n      this.ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        this.onMessage(data);\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.attemptReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, 3000 * this.reconnectAttempts);\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}","map":{"version":3,"names":["PulseTraderWebSocket","constructor","token","onMessage","ws","reconnectAttempts","maxReconnectAttempts","connect","WebSocket","onopen","console","log","send","JSON","stringify","type","onmessage","event","data","parse","onclose","attemptReconnect","onerror","error","setTimeout","disconnect","close"],"sources":["/Users/zhuolin/PulseTrader-2/src/services/websocket.ts"],"sourcesContent":["import { WebSocketMessage } from '../types';\n\nexport class PulseTraderWebSocket {\n  private ws: WebSocket | null;\n  private token: string;\n  private onMessage: (data: WebSocketMessage) => void;\n  private reconnectAttempts: number;\n  private maxReconnectAttempts: number;\n\n  constructor(token: string, onMessage: (data: WebSocketMessage) => void) {\n    this.ws = null;\n    this.token = token;\n    this.onMessage = onMessage;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n  }\n\n  connect(): void {\n    try {\n      this.ws = new WebSocket('ws://localhost:8080');\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        // Authenticate\n        if (this.ws) {\n          this.ws.send(JSON.stringify({ type: 'auth', token: this.token }));\n        }\n      };\n\n      this.ws.onmessage = (event) => {\n        const data = JSON.parse(event.data) as WebSocketMessage;\n        this.onMessage(data);\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.attemptReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  }\n\n  attemptReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, 3000 * this.reconnectAttempts);\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n} "],"mappings":"AAEA,OAAO,MAAMA,oBAAoB,CAAC;EAOhCC,WAAWA,CAACC,KAAa,EAAEC,SAA2C,EAAE;IAAA,KANhEC,EAAE;IAAA,KACFF,KAAK;IAAA,KACLC,SAAS;IAAA,KACTE,iBAAiB;IAAA,KACjBC,oBAAoB;IAG1B,IAAI,CAACF,EAAE,GAAG,IAAI;IACd,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,oBAAoB,GAAG,CAAC;EAC/B;EAEAC,OAAOA,CAAA,EAAS;IACd,IAAI;MACF,IAAI,CAACH,EAAE,GAAG,IAAII,SAAS,CAAC,qBAAqB,CAAC;MAE9C,IAAI,CAACJ,EAAE,CAACK,MAAM,GAAG,MAAM;QACrBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClC,IAAI,CAACN,iBAAiB,GAAG,CAAC;QAC1B;QACA,IAAI,IAAI,CAACD,EAAE,EAAE;UACX,IAAI,CAACA,EAAE,CAACQ,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;YAAEC,IAAI,EAAE,MAAM;YAAEb,KAAK,EAAE,IAAI,CAACA;UAAM,CAAC,CAAC,CAAC;QACnE;MACF,CAAC;MAED,IAAI,CAACE,EAAE,CAACY,SAAS,GAAIC,KAAK,IAAK;QAC7B,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,KAAK,CAACC,IAAI,CAAqB;QACvD,IAAI,CAACf,SAAS,CAACe,IAAI,CAAC;MACtB,CAAC;MAED,IAAI,CAACd,EAAE,CAACgB,OAAO,GAAG,MAAM;QACtBV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,IAAI,CAACU,gBAAgB,CAAC,CAAC;MACzB,CAAC;MAED,IAAI,CAACjB,EAAE,CAACkB,OAAO,GAAIC,KAAK,IAAK;QAC3Bb,OAAO,CAACa,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF;EAEAF,gBAAgBA,CAAA,EAAS;IACvB,IAAI,IAAI,CAAChB,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,EAAE;MACtD,IAAI,CAACD,iBAAiB,EAAE;MACxBmB,UAAU,CAAC,MAAM;QACfd,OAAO,CAACC,GAAG,CAAC,+BAA+B,IAAI,CAACN,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,GAAG,CAAC;QAClG,IAAI,CAACC,OAAO,CAAC,CAAC;MAChB,CAAC,EAAE,IAAI,GAAG,IAAI,CAACF,iBAAiB,CAAC;IACnC;EACF;EAEAoB,UAAUA,CAAA,EAAS;IACjB,IAAI,IAAI,CAACrB,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACsB,KAAK,CAAC,CAAC;IACjB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}